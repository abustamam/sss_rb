#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

#
# generated by racc
#
require_relative 'style_sheet'
require_relative 'rule'
require_relative 'property'
require_relative 'parser.rex'

module SSS
  class Parser < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 55)

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,     5,     6,    20,    21,    22,    23,    21,    22,    23,
    14,     5,     6,    15,    10,     9,    16,    13,     7,    13 ]

racc_action_check = [
    18,     2,     2,    16,    18,    18,    18,    16,    16,    16,
    11,     0,     0,    11,     7,     4,    13,    15,     1,     9 ]

racc_action_pointer = [
     7,    18,    -3,   nil,    13,   nil,   nil,    14,   nil,    15,
   nil,     7,   nil,     9,   nil,    13,    -1,   nil,    -4,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_action_default = [
   -18,   -18,    -1,    -2,   -18,    -5,    -6,   -18,    -3,    -7,
    25,   -18,    -8,   -18,    -4,   -10,   -18,    -9,   -11,   -12,
   -14,   -15,   -16,   -17,   -13 ]

racc_goto_table = [
    12,    19,     3,    24,     8,    11,    17,     2,    18,     1 ]

racc_goto_check = [
     6,     8,     3,     8,     3,     5,     6,     2,     7,     1 ]

racc_goto_pointer = [
   nil,     9,     7,     2,   nil,    -4,    -9,    -8,   -15 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 12, :_reduce_1,
  1, 13, :_reduce_2,
  2, 13, :_reduce_3,
  4, 14, :_reduce_4,
  1, 15, :_reduce_none,
  1, 15, :_reduce_none,
  0, 16, :_reduce_7,
  1, 16, :_reduce_8,
  3, 16, :_reduce_9,
  2, 16, :_reduce_10,
  3, 17, :_reduce_11,
  1, 18, :_reduce_12,
  2, 18, :_reduce_13,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none,
  1, 19, :_reduce_none ]

racc_reduce_n = 18

racc_shift_n = 25

racc_token_table = {
  false => 0,
  :error => 1,
  "{" => 2,
  "}" => 3,
  :IDENTIFIER => 4,
  :SELECTOR => 5,
  ";" => 6,
  ":" => 7,
  :COLOR => 8,
  :NUMBER => 9,
  :DIMENSION => 10 }

racc_nt_base = 11

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"{\"",
  "\"}\"",
  "IDENTIFIER",
  "SELECTOR",
  "\";\"",
  "\":\"",
  "COLOR",
  "NUMBER",
  "DIMENSION",
  "$start",
  "stylesheet",
  "rules",
  "rule",
  "selector",
  "properties",
  "property",
  "values",
  "value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.racc', 9)
  def _reduce_1(val, _values, result)
     return StyleSheet.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 12)
  def _reduce_2(val, _values, result)
     return [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 13)
  def _reduce_3(val, _values, result)
     return val[0].push(val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 16)
  def _reduce_4(val, _values, result)
     return Rule.new(val[0], val[2]) 
    result
  end
.,.,

# reduce 5 omitted

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.racc', 24)
  def _reduce_7(val, _values, result)
     return [ ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 25)
  def _reduce_8(val, _values, result)
     return [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 26)
  def _reduce_9(val, _values, result)
     return val[0].push(val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 27)
  def _reduce_10(val, _values, result)
     return val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_11(val, _values, result)
     return Property.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_12(val, _values, result)
     return [ val[0] ] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_13(val, _values, result)
     return val[0].push(val[1]) 
    result
  end
.,.,

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module SSS


#puts 'sss'
#parser = SSS::Parser.new
#
#while true
#  print '>>> '; $stdout.flush
#  str = $stdin.gets.strip
#  break if /q/i === str
#
#  begin
#    style_sheet = parser.scan_str(str)
#    puts style_sheet.to_s
#  rescue ParseError => e
#    puts e
#    puts 'parse error'
#  end
#end
